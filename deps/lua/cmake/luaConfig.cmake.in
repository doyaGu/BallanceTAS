# cmake/luaConfig.cmake.in

@PACKAGE_INIT@

# Set version
set(lua_VERSION @PROJECT_VERSION@)
set(lua_VERSION_MAJOR @PROJECT_VERSION_MAJOR@)
set(lua_VERSION_MINOR @PROJECT_VERSION_MINOR@)
set(lua_VERSION_PATCH @PROJECT_VERSION_PATCH@)

# Set paths
set_and_check(lua_INCLUDE_DIR "@PACKAGE_CMAKE_INSTALL_INCLUDEDIR@")
set_and_check(lua_LIB_DIR "@PACKAGE_CMAKE_INSTALL_LIBDIR@")
set_and_check(lua_BIN_DIR "@PACKAGE_CMAKE_INSTALL_BINDIR@")

# Platform and configuration info
set(lua_PLATFORM "@LUA_PLATFORM@")
set(lua_BUILD_SHARED @LUA_BUILD_SHARED@)
set(lua_BUILD_STATIC @LUA_BUILD_STATIC@)

# Include targets
include("${CMAKE_CURRENT_LIST_DIR}/luaTargets.cmake")

# Set up imported targets and compatibility variables
set(lua_FOUND TRUE)

# Determine which targets are available
set(lua_TARGETS_AVAILABLE)
if(TARGET lua::lua_static)
    list(APPEND lua_TARGETS_AVAILABLE lua::lua_static)
endif()
if(TARGET lua::lua_shared)
    list(APPEND lua_TARGETS_AVAILABLE lua::lua_shared)
endif()

# Set main target (prefer shared if available)
if(TARGET lua::lua_shared)
    set(lua_LIBRARY lua::lua_shared)
    get_target_property(lua_INCLUDE_DIRS lua::lua_shared INTERFACE_INCLUDE_DIRECTORIES)
elseif(TARGET lua::lua_static)
    set(lua_LIBRARY lua::lua_static)
    get_target_property(lua_INCLUDE_DIRS lua::lua_static INTERFACE_INCLUDE_DIRECTORIES)
endif()

# Legacy variables for compatibility
set(lua_LIBRARIES ${lua_LIBRARY})
set(LUA_LIBRARIES ${lua_LIBRARY})
set(LUA_INCLUDE_DIR ${lua_INCLUDE_DIR})
set(LUA_INCLUDE_DIRS ${lua_INCLUDE_DIRS})
set(LUA_VERSION_STRING ${lua_VERSION})

# Library naming information
if(TARGET lua::lua_shared AND TARGET lua::lua_static)
    set(lua_LIBRARY_NAMING "both")
    set(lua_STATIC_SUFFIX "-static")
elseif(TARGET lua::lua_shared)
    set(lua_LIBRARY_NAMING "shared_only")
    set(lua_STATIC_SUFFIX "")
else()
    set(lua_LIBRARY_NAMING "static_only")
    set(lua_STATIC_SUFFIX "")
endif()

# Executable paths
find_program(LUA_EXECUTABLE lua HINTS ${lua_BIN_DIR})
find_program(LUAC_EXECUTABLE luac HINTS ${lua_BIN_DIR})

# Function to add Lua module
function(add_lua_module MODULE_NAME)
    cmake_parse_arguments(LUA_MODULE "" "DESTINATION" "SOURCES" ${ARGN})
    
    if(NOT LUA_MODULE_DESTINATION)
        set(LUA_MODULE_DESTINATION "${CMAKE_INSTALL_DATAROOTDIR}/lua/${lua_VERSION_MAJOR}.${lua_VERSION_MINOR}")
    endif()
    
    foreach(SOURCE ${LUA_MODULE_SOURCES})
        install(FILES ${SOURCE} DESTINATION ${LUA_MODULE_DESTINATION})
    endforeach()
endfunction()

# Function to compile Lua sources
function(compile_lua_sources)
    cmake_parse_arguments(COMPILE_LUA "" "OUTPUT_DIR" "SOURCES" ${ARGN})
    
    if(NOT COMPILE_LUA_OUTPUT_DIR)
        set(COMPILE_LUA_OUTPUT_DIR ${CMAKE_CURRENT_BINARY_DIR})
    endif()
    
    foreach(SOURCE ${COMPILE_LUA_SOURCES})
        get_filename_component(SOURCE_NAME ${SOURCE} NAME_WE)
        add_custom_command(
            OUTPUT ${COMPILE_LUA_OUTPUT_DIR}/${SOURCE_NAME}.luac
            COMMAND ${LUAC_EXECUTABLE} -o ${COMPILE_LUA_OUTPUT_DIR}/${SOURCE_NAME}.luac ${SOURCE}
            DEPENDS ${SOURCE} ${LUAC_EXECUTABLE}
            COMMENT "Compiling Lua source ${SOURCE}"
        )
    endforeach()
endfunction()

check_required_components(lua)